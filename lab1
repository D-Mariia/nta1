import time
import random
import math
import numpy as np
from tabulate import tabulate

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def pseudo(a, p):
    if gcd(a, p) != 1:
        return False
    return pow(a, p - 1, p) == 1

def solovey_strassen(p, k):
    if p < 2:
        return False
    if p % 2 == 0:
        return False
    if p == 2:
        return True
    counter = 0
    for i in range(k):
        x = random.randint(2, p - 1)
        if gcd(x, p) > 1:
            return False
        if not pseudo(x, p):
            return False
        counter += 1
    return True



def trial_div(n):
    limit = 47
    d = []
    for i in range(2, limit + 1):
        if solovey_strassen(i, 10) or i == 2:
            while n % i == 0:
                d.append(i)
                n //= i
    return d




def f(x, n):
    return (x ** 2 + 1) % n

def pollard_rho(n, f):
    if n % 2 == 0:
        return 2
    x, y, d = 2, 2, 1
    while d == 1:
        x = f(x, n)
        y = f(f(y, n), n)
        d = gcd(abs(x - y), n)
    return d if d != n and d != 1 else None



def legendre_symbol(n, p):
    if n % p == 0:
        return 0
    return pow(n, (p - 1) // 2, p)

def B_base(n):
    L = math.exp(math.sqrt(math.log2(n) * math.log2(math.log2(n))))
    a = 1 / math.sqrt(2)
    L = L ** a
    B = [-1, 2]
    p = 2
    while p < L:
        if solovey_strassen(p, 10) and legendre_symbol(n, p) == 1:
            B.append(p)
        p += 1
        while not solovey_strassen(p, 10):
            p += 1
    return B

def fraction(n):
    a0 = int(math.sqrt(n))
    if a0 * a0 == n:
        return [a0]
    fractions = [a0]
    u, v = a0, 1
    while True:
        v = (n - u**2) // v
        a = (a0 + u) // v
        u = a * v - u
        fractions.append(a)
        if a == 2*a0:
            break
    return fractions[:(len(fractions))//1000]

def find_b_b2_numbers(n):
    a = fraction(n)
    b = [1, 0]
    for i in range(1, len(a)):
        if i == 1:
            b[i] = a[0]
            b.append(b[i])
        else:
            b[i] = pow(a[i-1] * b[i-1] + b[i-2], 1, n)
            b.append(b[i])
    b_2 = [0]
    for i in range(0, len(b)-1):
        b_2[i] = pow(b[i], 2, n)
        c = n / 2
        if b_2[i] >= c:
            b_2[i] = b_2[i] - n
        b_2.append(b_2[i])
    return b[:-1], b_2[:-1]

def vector_number(x, factor_base):
    exponent_vector = [0] * len(factor_base)
    if x < 0:
        exponent_vector[0] = 1
        x = -x
    for i in range(1, len(factor_base)):
        p = factor_base[i]
        while x % p == 0:
            exponent_vector[i] += 1
            x //= p
    if x == 1:
        return exponent_vector
    else:
        return None

def vector_list(numbers, factor_base):
    matrix = []
    for num in numbers:
        exp_vector = vector_number(num, factor_base)
        if exp_vector:
            matrix.append(exp_vector)
    return np.array(matrix)

def conversion_step_form(A):
    m, n = A.shape
    A = A.copy()
    cur_row = 0
    free_variables = []
    for col in range(n):
        pivot_row = None
        for row in range(cur_row, m):
            if A[row, col] == 1:
                pivot_row = row
                break
        if pivot_row is None:
            free_variables.append(col)
            continue
        A[[cur_row, pivot_row]] = A[[pivot_row, cur_row]]
        for row in range(m):
            if row != cur_row and A[row, col] == 1:
                A[row] ^= A[cur_row]
        cur_row += 1
    return A, free_variables

def find_basis(A):
    m, n = A.shape
    A, free_variables = conversion_step_form(A)
    basis = []
    for free_var in free_variables:
        solution = np.zeros(n, dtype=int)
        solution[free_var] = 1
        for r in range(m):
            pivot_col = np.where(A[r] == 1)[0]
            if len(pivot_col) > 0 and pivot_col[0] < free_var:
                solution[pivot_col[0]] = A[r, free_var]
        basis.append(solution)
    return np.array(basis)

def BrillhartMorrison_method(n):
    b_list, b2_list = find_b_b2_numbers(n)
    exp_matrix = vector_list(b2_list, B_base(n))
    M = np.array(exp_matrix, dtype=int)
    M = M.transpose()
    matrix = []
    basis_vectors = find_basis(M)
    for i in range(1, len(basis_vectors) - 1):
        matrix.append(basis_vectors[i] % 2)
    matrix = np.array(matrix)
    i = 0
    while i < len(matrix):
        position = [a for a, x in enumerate(matrix[i]) if x == 1]
        X = 1
        Y = 1
        for j in range(len(position)):
            X = pow(X * b_list[position[j]], 1, n)
            Y = Y * b2_list[position[j]]
        if X == pow(int(math.sqrt(abs(Y))), 1, n) and X == pow(int((-1)*math.sqrt(abs(Y))), 1, n):
            i = i + 1
        else:
            d1 = gcd(X - int(math.sqrt(abs(Y))), n)
            d2 = gcd(X + int(math.sqrt(abs(Y))), n)
            if 1 < d1 < n:
                return d1, n // d1
            elif 1 < d2 < n:
                return d2, n // d2
            else:
                i += 1



n = int(input("Введіть число для перевірки на простоту та можливість поділу: "))

def main(n, result=None):
    if result is None:
        result = []

    if solovey_strassen(n, 101):
        result.append(n)
        print("Канонічний розклад:", result)
        return

    divisor_td = trial_div(n)
    if divisor_td:
        print(f"Дільник числа {n}, знайдений методом пробних ділень: {divisor_td}")
        result.append(divisor_td)
        for i in range(0, len(divisor_td)):
            n = n // divisor_td[i]
        if n == 1:
            print("Канонічний розклад:", result)
            return
        else:
            print(f"Тепер працюємо з числом {n}.")
    else:
        print("Дільник не знайдений методом Полларда.")


    divisor_pr = pollard_rho(n, f)
    if divisor_pr:
        print(f"Дільник числа {n}, знайдений методом Полларда: {divisor_pr}")
        result.append(divisor_pr)
        n = n // divisor_pr
        if n == 1:
            print("Канонічний розклад:", result)
            return
        else:
            print(f"Тепер працюємо з числом {n}.")
    else:
        print("Дільник не знайдений методом Полларда.")


    if solovey_strassen(n, 101):
        result.append(n)
        print("Канонічний розклад:", result)
        return


    divisor1, divisor2  = BrillhartMorrison_method(n)
    print(divisor1, divisor2)
    if divisor1:
        result.append(divisor1)
        n = n // divisor1
        print(divisor1, divisor2)
        return

    print("Я не можу знайти канонічний розклад числа :(")



if __name__ == "__main__":
    main(n)


def time_pollard_rho(n):
    results = []
    for n in n:
        start_time = time.time()
        d = pollard_rho(n,f)
        end_time = time.time()
        time_rho = end_time - start_time
        results.append((n, d, time_rho))
    return results

def display_rho(results):
    table = []
    for n, d, time_rho in results:
        if d:
            table.append([n, d, f"{time_rho:.8f} секунд"])
        else:
            table.append([n, "Не знайдений", f"{time_rho:.8f} секунд"])
    headers = ["Число", "Дільник", "р-метод Поллард" ]
    print(tabulate(table, headers=headers, tablefmt="simple"))

numbers = [
    3009182572376191, 1021514194991569, 4000852962116741, 15196946347083,
    499664789704823, 269322119833303, 679321846483919, 96267366284849,
    61333127792637, 2485021628404193
]
results = time_pollard_rho(numbers)
display_rho(results)

"""def time_bm(n):
    results = []
    for n in n:
        start_time = time.time()
        d = BrillhartMorrison_method(n)
        end_time = time.time()
        time_bm = end_time - start_time
        results.append((n, d, time_bm))
    return results

def display_bm(results):
    table = []
    for n, d, time_bm in results:
        if d:
            table.append([n, d, f"{time_bm :.8f} секунд"])
        else:
            table.append([n, "Не знайдений", f"{time_bm :.8f} секунд"])
    headers = ["Число", "Дільник", "Брілхарта-Морісона" ]
    print(tabulate(table, headers=headers, tablefmt="simple"))

numbers = [
    3009182572376191, 1021514194991569, 4000852962116741, 15196946347083,
    499664789704823, 269322119833303, 679321846483919, 96267366284849,
    61333127792637, 2485021628404193
]
results = time_bm(numbers)
display_bm(results)"""
