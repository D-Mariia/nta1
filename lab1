import random
import time
from tabulate import tabulate

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def pseudo(a, p):
    if gcd(a, p) != 1:
        return False
    return pow(a, p - 1, p) == 1

def solovey_strassen(p, k):
    if p < 2:
        return False
    if p % 2 == 0:
        return False
    if p == 2:
        return True

    counter = 0
    for i in range(k):
        x = random.randint(2, p - 1)
        if gcd(x, p) > 1:
            return False
        if not pseudo(x, p):
            return False
        counter += 1
    return True

"""
def trial_div(n):
    limit = int(math.sqrt(n))
    d = []

    for i in range(2, limit):
        while n % i == 0:
            d.append(i)
            n //= i
    if n > 1:
        d.append(n)
    return d
"""

def trial_div(n, divisor):
    return n % divisor == 0

def f(x, n):
    return (x ** 2 + 1) % n

def pollard_rho(n, f):
    if n % 2 == 0:
        return 2

    x, y, d = 2, 2, 1
    while d == 1:
        x = f(x, n)
        y = f(f(y, n), n)
        d = gcd(abs(x - y), n)
    return d if d != n and d != 1 else None

def fraction(n):
    a0 = int(math.sqrt(n))
    if a0 * a0 == n:
        return [a0]

    fractions = [a0]
    u, v = a0, 1

    while True:
        v = (n - u**2) // v
        a = (a0 + u) // v
        u = a * v - u

        fractions.append(a)

        if a == 2 * a0:
            break
    return fractions

"""
def main():
    number = int(input("Введіть число для перевірки на простоту та можливість поділу: "))

    if solovey_strassen(number,101):
        print(f"Число {number} є простим.")
    else:
        print(f"Число {number} не є простим.")


    divisor = int(input("Введіть дільник для перевірки: "))

    if solovey_strassen(divisor,101):
        print(f"Число {divisor} є простим.")
    else:
        print(f"Число {divisor} не є простим.")

    if trial_div(number, divisor):
        print(f"Число {number} ділиться на {divisor}.")
    else:
        print(f"Число {number} не ділиться на {divisor}.")


    divisor_found = pollard_rho(number,f)

    if divisor_found:
        print(f"Дільник числа {number}, знайдений методом Полларда: {divisor_found}")
        new_number = number // divisor_found
        print(f"Тепер працюємо з числом {new_number}.")
    else:
        print("Дільник не знайдений методом Полларда.")

if __name__ == "__main__":
    main()
"""

def time_pollard_rho(n):
    results = []

    for n in n:
        start_time = time.time()

        d = pollard_rho(n,f)

        end_time = time.time()
        time_rho = end_time - start_time

        results.append((n, d, time_rho))

    return results

def display_rho(results):
    table = []

    for n, d, time_rho in results:
        if d:
            table.append([n, d, f"{time_rho:.8f} секунд"])
        else:
            table.append([n, "Не знайдений", f"{time_rho:.8f} секунд"])

    headers = ["Число", "Дільник", "р-метод Поллард" ]
    print(tabulate(table, headers=headers, tablefmt="simple"))


numbers = [
    3009182572376191, 1021514194991569, 4000852962116741, 15196946347083,
    499664789704823, 269322119833303, 679321846483919, 96267366284849,
    61333127792637, 2485021628404193
]

results = time_pollard_rho(numbers)

display_rho(results)

"""
def time_bm(n):
    results = []

    for n in n:
        start_time = time.time()

        d = тут треба вставити функцію для БМ

        end_time = time.time()
        time_bm = end_time - start_time

        results.append((n, d, time_bm))

    return results

def display_bm(results):
    table = []

    for n, d, time_bm in results:
        if d:
            table.append([n, d, f"{time_bm :.8f} секунд"])
        else:
            table.append([n, "Не знайдений", f"{time_bm :.8f} секунд"])

    headers = ["Число", "Дільник", "Брілхарта-Морісона" ]
    print(tabulate(table, headers=headers, tablefmt="simple"))


numbers = [
    3009182572376191, 1021514194991569, 4000852962116741, 15196946347083,
    499664789704823, 269322119833303, 679321846483919, 96267366284849,
    61333127792637, 2485021628404193
]

results = time_bm (numbers)

display_bm (results)
"""
